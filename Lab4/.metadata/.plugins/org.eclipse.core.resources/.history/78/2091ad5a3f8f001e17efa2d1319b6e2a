/*
 * scheduler.c
 *
 *  Created on: Nov 23, 2023
 *      Author: M S I
 */

#include "scheduler.h"
//sTasks SCH_tasks_G[SCH_MAX_TASKS];
//uint8_t current_index_task = 0;

void SCH_Init(void){
	SCH_TASKS_LIST.NumOfTask = 0;
	for(int index = 0; index < SCH_MAX_TASKS; index++){
		SCH_TASKS_LIST.TASK_QUEUE[index].Delay = 0;
		SCH_TASKS_LIST.TASK_QUEUE[index].Period = 0;
		SCH_TASKS_LIST.TASK_QUEUE[index].RunMe = 0;
		SCH_TASKS_LIST.TASK_QUEUE[index].pTask = 0;
	}
}

void Insert_to_List(sTasks task){
	if(SCH_TASKS_LIST.NumOfTask == 0){
		SCH_TASKS_LIST.TASK_QUEUE[0] = task;
		SCH_TASKS_LIST.NumOfTask += 1;
		return;
	}
	else{
		int loc = 0;
		int bef = SCH_TASKS_LIST.TASK_QUEUE[0].Delay;
		int sum = SCH_TASKS_LIST.TASK_QUEUE[0].Delay;
		while(loc < SCH_TASKS_LIST.NumOfTask && task.Delay > sum){
			loc++;
			if(loc < SCH_TASKS_LIST.NumOfTask){
				bef = sum;
				sum += SCH_TASKS_LIST.TASK_QUEUE[loc].Delay;
			}
		}
		if(loc == SCH_TASKS_LIST.NumOfTask){
			task.Delay -= sum;
			SCH_TASKS_LIST.TASK_QUEUE[loc] = task;
			SCH_TASKS_LIST.NumOfTask += 1;
			return;
		}
		else{
			for(int i = SCH_TASKS_LIST.NumOfTask; i > loc; i--){
				SCH_TASKS_LIST.TASK_QUEUE[i] = SCH_TASKS_LIST.TASK_QUEUE[i-1];
			}
			if(loc == 0){
				SCH_TASKS_LIST.TASK_QUEUE[loc] = task;
				sum = 0;
				bef = task.Delay;
			}
			else{
				task.Delay -= bef;
				sum = bef;
				bef += task.Delay;
				SCH_TASKS_LIST.TASK_QUEUE[loc] = task;
			}
			sum += SCH_TASKS_LIST.TASK_QUEUE[loc+1].Delay;
			SCH_TASKS_LIST.TASK_QUEUE[loc+1].Delay = sum - bef;
			SCH_TASKS_LIST.NumOfTask += 1;
		}
	}
}

void SCH_Add_Task (void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
	if(current_index_task < SCH_MAX_TASKS){
		SCH_tasks_G[current_index_task].pTask = pFunction;
		SCH_tasks_G[current_index_task].Delay = DELAY;
		SCH_tasks_G[current_index_task].Period = PERIOD;
		SCH_tasks_G[current_index_task].RunMe = 0;
		SCH_tasks_G[current_index_task].TaskID = current_index_task;
		current_index_task++;
	}
}

void SCH_Update(void){
	for(int i = 0; i < current_index_task; i++){
		if (SCH_tasks_G[i].Delay > 0){
			SCH_tasks_G[i].Delay --;
		}
		else{
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
			SCH_tasks_G[i].RunMe += 1;
		}
	}
}

void SCH_Dispatch_Tasks(void){
	for(int i = 0; i < current_index_task; i++){
		if(SCH_tasks_G[i].RunMe > 0){
			SCH_tasks_G[i].RunMe --;
			(*SCH_tasks_G[i].pTask)();
		}
	}
}
